<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -W0

require 'yaml'

MINIMUM_SPACING_BEFORE = "minimum_spacing_before"
MINIMUM_SPACING_AFTER  = "minimum_spacing_after"
PADDING                = "padding"
REGEXP                 = "regexp"

# Alignes the source
def align(text, regexp_hash, max_offset)
  text.to_a.map do |line|
    if is_all_whitespace(line)
      line
    elsif !regexp_hash[REGEXP].match(line).nil?
      
      before, symbol, after = split(line, regexp_hash)
      number_of_spaces      = (max_offset - before.length)
      spacing               = ' ' * number_of_spaces

      if shouldInsertBefore(line, regexp_hash)
        before + spacing + symbol + after
      else
        before + symbol + spacing + after
      end
    else
      line
    end
  end.join
end

def add_minimum_spacing(text, regexp_hash)
  text.to_a.map do |line|
    before, symbol, after = split(line, regexp_hash)
    txt = before
    if right_spacing(before).length &lt; regexp_hash[MINIMUM_SPACING_BEFORE].length
      txt += regexp_hash[MINIMUM_SPACING_BEFORE] 
    end
    txt += symbol
    if left_spacing(after).length &lt; regexp_hash[MINIMUM_SPACING_AFTER].length
      txt += regexp_hash[MINIMUM_SPACING_AFTER]
    end
    txt += after
  end.join
end

def split(line, regexp_hash)
  offset, ending   = regexp_hash[REGEXP].match(line).offset(0)
  before           = line[0...offset]
  symbol           = line[offset...ending]
  after            = line[ending...line.size]
  [before, symbol, after]
end

# Figures out if the spacing should be added before or after the match.
def shouldInsertBefore(line, regexp_hash)
  !(regexp_hash[PADDING] == "after")
end

# Finds the width of the line with the most text before the regexp.
def width(text, regexp)
  text.split("\n").collect { |line| offsetOfRegexpInLine(line,regexp) }.max
end

# The offset of a regexp in a line of text. -1 if it doesn't match
def offsetOfRegexpInLine(line, regexp)
  match = regexp.match(line)
  if !match.nil?
    match.offset(match.size &gt; 1 ? 1 : 0)[0]
  else
    -1
  end
end

# Checks that the regexp matches every line
def hasMatchForAll(text, regexp)
  text.to_a.all?{ |line| line =~ regexp }
end

def left_spacing(line)
  line.chars.take_while { |char| char =~ /\s/ }.join
end

def right_spacing(line)
  left_spacing(line.reverse)
end

# squeeces all whitspace in the line (preserves the left spacing)
def trim_all_whitespace(text)
  text.to_a.map do |line|
    left_spacing(line) + line.squeeze(" ").squeeze("	").lstrip #the 2. is a tab
  end.join
end

def is_all_whitespace(line)
  if /^\s*$/.match(line)
    true
  else
    false
  end
end

# finds the minimum offset of the capture of a regexp across all lines in a text.
def minOffsetOfRegexp(text,regexp_hash)
  min_offset = text.split("\n").collect { |line| offsetOfRegexpInLine(line,regexp_hash['regexp']) }.min
  { "min_offset" =&gt; min_offset, "regexp_hash" =&gt; regexp_hash }
end

# sorts and filters the regular expressions so the ones with the captures with the
# lowest offset comes first. The ones that aren't matched or doesn't need alignment
# are filtered out
def prioritizeRegexps(text, regexps_hash)
  no_blank_lines = text.to_a.select { |line| not is_all_whitespace(line) }.join
  regexps_hash.
    select  { |rh|    hasMatchForAll(no_blank_lines, rh['regexp']) }.
    collect { |rh|    minOffsetOfRegexp(no_blank_lines, rh) }.
    select  { |d|     not d['min_offset'].nil? }.
    sort    { |d1,d2| d1['min_offset'] &lt;=&gt; d2['min_offset'] }.
    select  { |d|     d['min_offset'] &gt; 0 }.
    collect { |d|     d['regexp_hash'] }
end

# Finds blocks of code to align. It uses the following heuristics:
#
#   - A line belongs to the previous block if it has the same indentation
#
# returns an array of dictionaries with the keys 'block', 'from', 'to' that
# expresses which lines the block spans.
def find_blocks(text)
  lines = text.to_a

  initial = {
    'prev'   =&gt; lines[0],
    'blocks' =&gt; [{
      'lines' =&gt; [],
      'from'  =&gt; 0,
      'to'    =&gt; 0
    }]
  }

  text.to_a.reduce(initial) do |reduced, line|
    blocks = reduced['blocks']

    if is_all_whitespace(line)
      blocks[blocks.size-1]['lines'] &lt;&lt; line
      blocks[blocks.size-1]['to']  = blocks[blocks.size-1]['to'] + 1
      { 'prev' =&gt; reduced['prev'], 'blocks' =&gt; blocks}
    elsif left_spacing(line) == left_spacing(reduced['prev'])
      blocks[blocks.size-1]['lines'] &lt;&lt; line
      blocks[blocks.size-1]['to']  = blocks[blocks.size-1]['to'] + 1
      { 'prev' =&gt; line, 'blocks' =&gt; blocks}
    else
      blocks &lt;&lt; {
        'lines' =&gt; [line],
        'from'  =&gt; blocks[blocks.size-1]['to'],
        'to'    =&gt; blocks[blocks.size-1]['to'] + 1
      }
      { 'prev' =&gt; line, 'blocks' =&gt; blocks}
    end
  end['blocks']
end

# Formats a single block.
def format_block(block_dict, regexps_hash)
  text = trim_all_whitespace(block_dict['lines'].join)
  prioritizeRegexps(text, regexps_hash).each do |regexp_hash|
    text = add_minimum_spacing(text, regexp_hash)
    text = align(text, regexp_hash, width(text, regexp_hash[REGEXP]))
  end
  text
end

# Formats every block in the text
def format_all(text, regexps_hash)
  text = trim_all_whitespace(text)
  find_blocks(text).
    map  { |block| format_block(block, regexps_hash) }.
    each { |txt|   print txt }
end

# Formats the source in the block that goins the given line. All other blocks
# are just printet w/o formatting.
def format_block_containing_line(text, line_number, regexps_hash)
  find_blocks(text).each do |block_dict|
    if block_dict['from'] &lt;= line_number &amp;&amp; block_dict['to'] &gt;= line_number
      print format_block(block_dict, regexps_hash)
    else
      print block_dict['lines'].join
    end
  end
end

=begin
  Great, lets get to the formatting then.
=end

regexps_hash = ENV['TM_SOURCE_ALIGNMENT_PATTERN']
regexps_hash = YAML::load(regexps_hash)

# Inject defaults and load regexp
regexps_hash.each do |kv|
  kv[REGEXP] = Regexp.new(kv[REGEXP])
  if kv[MINIMUM_SPACING_AFTER].nil? then kv[MINIMUM_SPACING_AFTER] = "" end
  if kv[MINIMUM_SPACING_BEFORE].nil? then kv[MINIMUM_SPACING_BEFORE] = "" end
  if kv[PADDING].nil? then kv[PADDING] = "before" end
end

text = STDIN.readlines().join()

if ENV['TM_SELECTED_TEXT'].nil?
  format_block_containing_line(text, ENV['TM_LINE_NUMBER'].to_i - 1, regexps_hash)
else
  format_all(text, regexps_hash)
end</string>
	<key>fallbackInput</key>
	<string>scope</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^@9</string>
	<key>name</key>
	<string>Align Source</string>
	<key>outputCaret</key>
	<string>heuristic</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>replaceInput</string>
	<key>uuid</key>
	<string>08636A01-94A8-4050-8A31-343E5BD187CF</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
